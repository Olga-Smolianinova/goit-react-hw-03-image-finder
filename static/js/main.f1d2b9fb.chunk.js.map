{"version":3,"sources":["components/Searchbar/Searchbar.js","components/images/default.jpg","components/ImageGalleryItem/ImageGalleryItem.js","components/Modal/Modal.js","components/ImageGallery/ImageGallery.js","components/Loader/Loader.js","components/Button/Button.js","api/gallery-api.js","App.js","index.js"],"names":["Searchbar","state","query","handleChange","event","setState","currentTarget","value","handleSubmit","preventDefault","props","onSubmit","className","this","type","autoComplete","autoFocus","placeholder","onChange","Component","ImageGalleryItem","imgSrc","imgAlt","largeSrc","onImgClick","src","alt","onClick","defaultProps","defaultImg","modalRoot","document","querySelector","Modul","handleKeydown","code","onClose","onOverlayClick","target","window","addEventListener","removeEventListener","createPortal","children","ImageGallery","showModal","toggleModal","gallery","map","id","webformatURL","largeImageURL","tags","App","color","height","width","timeout","Button","searchQuery","currentPage","perPage","axios","get","then","response","data","isLoading","error","changeQuery","totalHits","fetchImages","options","galleryApi","hits","length","Error","prevState","scrollTo","top","documentElement","scrollHeight","behavior","catch","finally","prevProps","shouldRenderLoadMoreButton","hideLoadMoreButton","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f1d2b9fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Searchbar.css';\r\n\r\nclass Searchbar extends Component {\r\n  state = {\r\n    query: '',\r\n  };\r\n\r\n  // МЕТОДЫ\r\n  handleChange = event => {\r\n    this.setState({\r\n      query: event.currentTarget.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    //  передача  props onSubmit из App.js для обработки действий когда будет изменяться query\r\n    this.props.onSubmit(this.state.query);\r\n\r\n    //   обновление input\r\n    this.setState({\r\n      query: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"Searchbar\">\r\n        <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\r\n          <button type=\"submit\" className=\"SearchForm-button\">\r\n            <span className=\"SearchForm-button-label\">Search</span>\r\n          </button>\r\n\r\n          <input\r\n            className=\"SearchForm-input\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            autoFocus\r\n            placeholder=\"Search images and photos\"\r\n            value={this.state.query}\r\n            onChange={this.handleChange}\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Searchbar;\r\n","export default __webpack_public_path__ + \"static/media/default.2e01288c.jpg\";","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './ImageGalleryItem.css';\r\n\r\nimport defaultImg from '../images/default.jpg';\r\n\r\nconst ImageGalleryItem = ({ imgSrc, imgAlt, largeSrc, onImgClick }) => {\r\n  return (\r\n    <li className=\"ImageGalleryItem\">\r\n      <img\r\n        src={imgSrc}\r\n        alt={imgAlt}\r\n        // width=\"320\"\r\n        className=\"ImageGalleryItem-image\"\r\n        onClick={() => {\r\n          onImgClick(largeSrc, imgAlt);\r\n        }}\r\n      />\r\n    </li>\r\n  );\r\n};\r\n\r\nImageGalleryItem.defaultProps = {\r\n  imgSrc: defaultImg,\r\n  largeSrc: defaultImg,\r\n};\r\n\r\nImageGalleryItem.propTypes = {\r\n  imgSrc: PropTypes.string,\r\n  imgAlt: PropTypes.string,\r\n  largeSrc: PropTypes.string,\r\n  onImgClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ImageGalleryItem;\r\n","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { createPortal } from 'react-dom'; //для создания портала, куда будем рендерить разметку компонента Modal\r\n\r\nimport './Modal.css';\r\n\r\n// для портала. ccылка к корневому элементу в index.html куда будем рендерить разметку компонента Modal.\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nclass Modul extends Component {\r\n  // ЖИЗНЕННЫЕ ЦИКЛЫ\r\n  componentDidMount() {\r\n    //при 1 стадии монтирования вешаем слушателя события на window  для закрытия Модального окна по нажатию на ESC сперва\r\n    window.addEventListener('keydown', this.handleKeydown);\r\n  }\r\n\r\n  // на стадии размонтирования и зачистки кода после использования.\r\n  componentWillUnmount() {\r\n    // снимаем слушателя события с window при закрытии Модального окна по нажатию на ESC\r\n    window.removeEventListener('keydown', this.handleKeydown);\r\n  }\r\n\r\n  // МЕТОДЫ\r\n  // закрытие Модального окна по нажатию на ESC\r\n  handleKeydown = event => {\r\n    if (event.code === 'Escape') {\r\n      // в props прокидываем toggleModal для возможности закрыть модалку по нажатию на \"Escape\"\r\n      this.props.onClose();\r\n    }\r\n  };\r\n\r\n  // закрытие модалки при клике на backdrop\r\n  onOverlayClick = event => {\r\n    if (event.target === event.currentTarget) {\r\n      this.props.onClose();\r\n    }\r\n  };\r\n\r\n  // возвращаем результат вызова import { createPortal } from 'react-dom'куда будем рендерить разметку компонента Modal и 1) первым параметром передаем разметку мадального окна; 2) ссылка на корневой элемент в index.html\r\n  render() {\r\n    return createPortal(\r\n      <div className=\"Overlay\" onClick={this.onOverlayClick}>\r\n        <div className=\"Modal\">{this.props.children}</div>\r\n      </div>,\r\n      modalRoot,\r\n    );\r\n  }\r\n}\r\n\r\nModul.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Modul;\r\n","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n// Components\r\nimport ImageGalleryItem from '../ImageGalleryItem';\r\n\r\nimport Modal from '../Modal';\r\n\r\nimport './ImageGallery.css';\r\n\r\nclass ImageGallery extends Component {\r\n  state = {\r\n    showModal: false, // для Модального окна\r\n    largeSrc: '',\r\n    imgAlt: '',\r\n  };\r\n  // Методы\r\n  // работа Модального окна. Открытие-закрытие в зависимости от предыдущего значения\r\n  toggleModal = () => {\r\n    this.setState(({ showModal }) => ({\r\n      showModal: !showModal,\r\n    }));\r\n  };\r\n\r\n  // открытие модального окна при клике на изображение\r\n  onImgClick = (largeSrc, imgAlt) => {\r\n    // console.log(largeSrc);\r\n    // console.log(imgAlt);\r\n\r\n    this.toggleModal();\r\n\r\n    this.setState({ largeSrc, imgAlt });\r\n  };\r\n\r\n  render() {\r\n    const { gallery } = this.props;\r\n\r\n    const { showModal, largeSrc, imgAlt } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <ul className=\"ImageGallery\">\r\n          {/* Набор <li> с изображениями */}\r\n          {gallery.map(({ id, webformatURL, largeImageURL, tags }) => (\r\n            <ImageGalleryItem\r\n              key={id}\r\n              imgSrc={webformatURL}\r\n              imgAlt={tags}\r\n              largeSrc={largeImageURL}\r\n              onImgClick={this.onImgClick}\r\n            />\r\n          ))}\r\n        </ul>\r\n\r\n        {/* Modal window. Открытие по условию*/}\r\n        {showModal && (\r\n          <Modal onClose={this.toggleModal}>\r\n            <img src={largeSrc} alt={imgAlt} />\r\n          </Modal>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nImageGallery.propTypes = {\r\n  gallery: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\n\r\nexport default ImageGallery;\r\n","import React, { Component } from 'react';\r\n\r\nimport Loader from 'react-loader-spinner';\r\n\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nexport default class App extends Component {\r\n  //other logic\r\n  render() {\r\n    return (\r\n      <Loader\r\n        type=\"Circles\"\r\n        color=\"#ffffff\" //#3f51b5\r\n        height={40}\r\n        width={40}\r\n        timeout={2000} //2 secs\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Button.css';\r\n\r\nconst Button = ({ onClick, children }) => {\r\n  return (\r\n    <button type=\"button\" className=\"Button\" onClick={onClick}>\r\n      Load more\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","import axios from 'axios'; //для fetch запросов\r\n\r\nconst fetchImages = ({ searchQuery = '', currentPage = 1, perPage = 12 }) => {\r\n  const apiKey = '19870632-ff45bfcc8dee770edfcb419ec';\r\n\r\n  return axios\r\n    .get(\r\n      `https://pixabay.com/api/?q=${searchQuery}&page=${currentPage}&key=${apiKey}&image_type=photo&orientation=horizontal&per_page=${perPage}`,\r\n    )\r\n    .then(response => response.data);\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { fetchImages };\r\n","import React, { Component } from 'react';\n\n// Components\nimport Searchbar from './components/Searchbar';\n\nimport ImageGallery from './components/ImageGallery';\n\nimport Loader from './components/Loader';\n\nimport Button from './components/Button';\n\n// API\nimport galleryApi from './api/gallery-api';\n\nclass App extends Component {\n  state = {\n    gallery: [],\n    currentPage: 1, //чтобы при нажатии на Load more могли увеличивать currentPage, и отрисовать следующую часть запроса\n    perPage: 12,\n\n    searchQuery: 'spring', //чтобы между разными запросами могли сохранить query, по которому делаем запрос и он же отрисовывался дальше при нажатии на  Load more\n    isLoading: false, //спиннер, состояние загрузки\n    error: null, //для catch\n  };\n\n  // ЖИЗНЕННЫЕ ЦИКЛЫ\n  componentDidMount() {\n    this.fetchImages();\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // console.log('update');\n    //  добавляем условие, что если компонент обновился и обновилось именно свойство searchQuery ({ searchQuery: query }) тогда в этом случае делаем http-запрос. (если этого не сделать http-запрос делается с пустой сторокой (searchQuery: '') и не возвращает результат)\n    if (prevState.searchQuery !== this.state.searchQuery) {\n      this.fetchImages();\n    }\n  }\n\n  // МЕТОДЫ\n  // метод, который будет отрабатываться при submit формы, когда будет изменяться query\n  changeQuery = query => {\n    // console.log(query);\n\n    // 1)  чтобы при нажатии на  Load more продолжался делаться запрос по предыдущему query\n    // 2)  чтобы изменить термин поиска, когда при вводе нового query в input - currentPage снова начинал отрисовываться с 1-й страницы, а не продалжал увеличиваться +1\n    //   3) articles при новом запросе перед начало обнулялся от предыдущих статей\n    //   4) при каждом следующем запросе обнуляем error\n    this.setState({\n      searchQuery: query,\n      currentPage: 1,\n      gallery: [],\n\n      totalHits: null,\n      error: null, //для catch\n    });\n  };\n\n  //выносим http-запрос в отдельный метод для удобства переиспользования\n  fetchImages = () => {\n    const { searchQuery, currentPage, perPage } = this.state;\n\n    //   выводим в отдельную переменную  searchQuery, currentPage для того, чтобы передать options в props в gallery-api.js;\n    const options = { searchQuery, currentPage, perPage };\n\n    //   сотояние загрузки, меняем значение\n    this.setState({ isLoading: true });\n\n    //   по результатам того  query, который пользователь ввел в input делаем http-запрос\n\n    // вызов функции из файла который прописывает логику настроек Api (gallery-api.js)\n    galleryApi\n      .fetchImages(options)\n\n      .then(({ hits, totalHits }) => {\n        // console.log(hits);\n        // console.log(totalHits);\n\n        // условие, если массив данных не пустой\n        if (hits.length === 0) {\n          new Error('Error fetching data');\n        }\n\n        this.setState(prevState => ({\n          gallery: [...prevState.gallery, ...hits],\n          totalHits,\n\n          // при нажатии на Load more увеличиваем currentPage, отрисовываем следующую часть запроса\n          currentPage: prevState.currentPage + 1,\n        }));\n\n        // Для плавной прокрутки\n        window.scrollTo({\n          top: document.documentElement.scrollHeight,\n          behavior: 'smooth',\n        });\n      })\n      .catch(error => this.setState({ error }))\n      // убираем отображение спиннера, когда загрузились данные\n      .finally(() => this.setState({ isLoading: false }));\n  };\n\n  render() {\n    const {\n      gallery,\n      currentPage,\n      perPage,\n      isLoading,\n      totalHits,\n      error,\n    } = this.state;\n\n    //   должен ли отображаться Load more и спиннер, если закончились images\n    const shouldRenderLoadMoreButton = gallery.length > 0 && !isLoading;\n\n    const hideLoadMoreButton = totalHits > (currentPage - 1) * perPage;\n    // console.log('perPage:', perPage);\n    // console.log('currentPage:', currentPage);\n\n    return (\n      <div className=\"App\">\n        {/* Searchbar. В props передаем метод, который будет отрабатываться при submit формы */}\n        <Searchbar onSubmit={this.changeQuery} />\n        {/* ImageGallery */}\n        <ImageGallery gallery={gallery} />\n\n        {/* Loader {/* появление спиннера, рендерим по условию  */}\n        {isLoading && <Loader />}\n\n        {/* Button Load more. Рендер по условию */}\n        {shouldRenderLoadMoreButton && hideLoadMoreButton && (\n          <Button onClick={this.fetchImages}>\n            <Loader />\n          </Button>\n        )}\n\n        {/* для обработки ошибок (error), рендер по условию */}\n        {error && (\n          <h2 className=\"ErrorMessage\">\n            Something get wrong! Please, try again!\n          </h2>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css'; //подключение стилей для normalize\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}